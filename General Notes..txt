----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Big O basics

0(1): Constant Time - Looking up a  single element, if an integer is even or odd. 

0(log n): Logarithmic - Finding an item in a sorted array with a binary search.

0(n): Linear - Searching an unsorted array for a specific value.

0(n log n): Log-Linear - Complex sorting algorithms like heap and merge sort

0(n^2): Quadratic - Simple sorting algorithms such as bubble sort, selection sort and insertion sort.

The measurement of performance for an algorithms is dependent on the input data and varies as the input data grows.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Common Algorithms

Searching - Finding a specific data in  a structure, like a substring in a string.

Unordered List Searching
performance: O(n) because as items are added to the list it increases the time by one step 



Ordered List Searching
Can use a binary search. Start up with two indexes at the beginning and end of the list. Then calculate the midpoint and check to see if that value is the index.
If the number we want is not the midpoint we check to see if the value we want is higher or low and disregard the values that are not in that range.
Then we restart the binary search again.
performance: O(log n)


Determine if a list is sorted
performance O(n)





----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Sorting - Take a dataset and apply a sort order to it.
Bubble Sorting ()
Iterating through an array if the next value is less than the previous the values will swap.
With a bubble sort, two values are compared to each other incrementally, the largest value is shifted until it is at the top.
performance: O(n^2) (generally nested for loops are n^2).



Merge Sort (Recursion)
divide and conquer algorithmBreaks dataset into individual pieces and merges them
great for large sets of data
performance: O(n log n)
Imagine two separate arrays that are sorted and one empty array that will hold the values. Iterate through both of them.
Compare both values from the two arrays at the first index to each other, the smaller one will get put into the empty array at the first index.
Then advance the index of the array we just put the last value in to the next index, and compare to the first index of the other array.

In practice when we only have one array we do this by first breaking down a single array into multiple arrays that are only one element each (sorted).
Then merge the single element arrays.


Quick Sort (Recursion)

Divide and Conquer, recursive algo.  
performance: O(n log n), worst case O(n^2)

Operates in place on the data. A quick sort sets a pit point to partition a data set. High and low index values are then used to rearrange data values that are on the "wrong" side of the pivot point.

Value at first index becomes the Pivot value. 
Increment from lower index pivot value each time there is a value less than te pivot until there is a value that is higher, and decrement from last index until there is a value that is lower than the higher value and swap it.
Where two indexes cross each other is where the index is split. Continue to split. 

After one recursive step the pivot element is placed at its correct array location.

All work is done in the partition steps.








----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



Computational - algorithm derives a new set of data from an existing set of input data. Calculate if a number is a prime number or
converting a measurement from one scale to another.

Collection Algorithms - Working with, navigating, manipulating collections of data , such as count specific items navigate among data elements, filter out data.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




EUCLID'S AlGORITHM 
Find the GCD of two integers: Example GCD of 20 and 8 is 4, because 8/4 is 2, and 20/4 is 5.
For two integers and b where A > B, divide A by B. If remainder, r, is 0 then stop: GCD is B. 
Otherwise set A to B and B to r and repeat step one until r is 0. 

in python
def gcd(a,b):
    while(b!=0):
        temp = a 
        a = b 
        b = temp % b
    return a 

in java 
class GCD {
    public static int findGcd(int a, int b){
    
    while(b! = 0){
        int temp = a;
        a = b;
        b = temp % b;
    }
    return a

    }
}



An algorithm that is deterministic always produces the same outputs from a given set of inputs.

Euclid's algorithm for Greatest Common Denominator classifies as exact/deterministic.


-----------------------------------------------------------------------------------------------------------------





